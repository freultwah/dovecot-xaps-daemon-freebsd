--- internal/apns.go.orig	2024-10-19 23:10:10.417432000 +0300
+++ internal/apns.go	2024-10-19 23:12:30.827785000 +0300
@@ -1,8 +1,10 @@
 package internal
 
 import (
+	"crypto/md5"
 	"crypto/tls"
 	"crypto/x509"
+	"encoding/hex"
 	"errors"
 	"github.com/freswa/dovecot-xaps-daemon/internal/config"
 	"github.com/freswa/dovecot-xaps-daemon/internal/database"
@@ -136,11 +138,11 @@
 	}
 	apns.mapMutex.Unlock()
 	for _, reg := range sendNow {
-		apns.SendNotification(reg, false)
+		apns.SendNotification(reg, false, "")
 	}
 }
 
-func (apns *Apns) SendNotification(registration database.Registration, delayed bool) {
+func (apns *Apns) SendNotification(registration database.Registration, delayed bool, mailbox string) {
 	apns.mapMutex.Lock()
 	if delayed {
 		apns.delayedApns[registration] = time.Now()
@@ -157,6 +159,11 @@
 	notification.Topic = apns.Topic
 	composedPayload := []byte(`{"aps":{`)
 	composedPayload = append(composedPayload, []byte(`"account-id":"`+registration.AccountId+`"`)...)
+	if mailbox != "" {
+ 		hash := md5.Sum([]byte(mailbox))
+ 		mailbox_hash := hex.EncodeToString(hash[:])
+ 		composedPayload = append(composedPayload, []byte(`, "m":"`+mailbox_hash+`"`)...)
+ 	}
 	composedPayload = append(composedPayload, []byte(`}}`)...)
 	notification.Payload = composedPayload
 	notification.PushType = apns2.PushTypeBackground
--- internal/socket.go.orig	2024-10-19 23:12:40.161664000 +0300
+++ internal/socket.go	2024-10-19 23:13:12.551783000 +0300
@@ -146,13 +146,6 @@
 		}
 	}
 
-	// we don't know how to handle other mailboxes other than INBOX, so ignore them
-	if notify.Mailbox != "INBOX" {
-		log.Debugln("Ignoring non INBOX event for:", notify.Mailbox)
-		writer.WriteHeader(http.StatusOK)
-		return
-	}
-
 	// Find all the devices registered for this mailbox event
 	registrations, err := httpHandler.db.FindRegistrations(notify.Username, notify.Mailbox)
 	if err != nil {
@@ -179,7 +172,7 @@
 	// Send a notification to all registered devices. We ignore failures
 	// because there is not a lot we can do.
 	for _, registration := range registrations {
-		httpHandler.apns.SendNotification(registration, !isMessageNew)
+		httpHandler.apns.SendNotification(registration, !isMessageNew, notify.Mailbox)
 	}
 
 	writer.WriteHeader(http.StatusOK)
